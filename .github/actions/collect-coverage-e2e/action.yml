name: 'Collect Coverage from E2E Tests'
description: 'Collects Go coverage data from ARK controller after E2E tests and uploads as artifacts'

inputs:
  artifact-name:
    description: 'Name for the coverage artifact (e.g., coverage-reports-standard)'
    required: true
  go-version:
    description: 'Go version to use for coverage tools'
    required: false
    default: '1.24'

runs:
  using: 'composite'
  steps:
    - name: Setup Go for coverage tools
      uses: actions/setup-go@v5
      with:
        go-version: ${{ inputs.go-version }}
    
    - name: Install gcov2lcov
      shell: bash
      run: go install github.com/jandelgado/gcov2lcov@latest

    - name: Collect coverage data from ARK controller
      shell: bash
      run: |
        # Scale down the ARK controller to stop writing coverage data
        kubectl -n ark-system scale deployment ark-controller --replicas=0
        
        # Wait for pods to terminate (coverage data is flushed on termination)
        kubectl -n ark-system wait --for=delete pod -l app.kubernetes.io/name=ark-controller --timeout=30s || true
        
        # Debug: Show remaining pods
        kubectl get pods -A
        
        # Get the persistent volume path where coverage data is stored
        PV=$(kubectl -n ark-system get pvc coverage-data -o jsonpath='{.spec.volumeName}')
        HOSTPATH=$(kubectl -n ark-system get pv $PV -o jsonpath='{.spec.local.path}')
        
        # Create temporary directory for processed coverage reports
        TMPC=/tmp/${{ inputs.artifact-name }}
        mkdir -p $TMPC
        
        # Move to workspace and process coverage data
        sudo mv ark /workspace || echo "ark directory may not exist"
        cd /workspace
        
        # Debug: List coverage files
        echo "Coverage files in persistent volume:"
        sudo ls -la $HOSTPATH || echo "No coverage files found"
        
        # Convert binary coverage data to text format
        sudo go tool covdata textfmt -i=$HOSTPATH -o=$TMPC/coverage.out
        
        # Generate HTML coverage report
        sudo go tool cover -html=$TMPC/coverage.out -o=$TMPC/coverage.html
        
        # Generate LCOV format (best effort - don't fail if it doesn't work)
        cd /workspace
        sudo $(which gcov2lcov) -infile $TMPC/coverage.out -outfile $TMPC/lcov.info 2>/dev/null || echo "LCOV generation skipped (best effort)"
        
        echo "Coverage collection complete for ${{ inputs.artifact-name }}"

    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.artifact-name }}
        path: /tmp/${{ inputs.artifact-name }}/
        retention-days: 7